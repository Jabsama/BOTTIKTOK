# TikTok Video Automation System - Architecture Diagram

```mermaid
graph TB
    %% External Data Sources
    TT[TikTok Discover Page] --> TS[Trend Scraper]
    HS[Hashtag Sites] --> TS
    
    %% Core Pipeline
    TS --> TR[Trend Ranker]
    TR --> BD[ε-Greedy Bandit]
    BD --> PB[Prompt Builder]
    PB --> VB[Video Builder]
    VB --> UP[TikTok Uploader]
    UP --> AS[Analytics Scraper]
    AS --> BD
    
    %% Data Storage
    DB[(SQLite Database)]
    TS --> DB
    TR --> DB
    BD --> DB
    PB --> DB
    UP --> DB
    AS --> DB
    
    %% Configuration & Assets
    CF[config.yaml] --> PB
    CF --> VB
    CF --> UP
    
    BG[Background Assets] --> VB
    OV[Overlay Assets] --> VB
    LUT[LUT Files] --> VB
    
    %% Scheduler & Automation
    SC[Scheduler Script] --> TS
    SC --> TR
    SC --> BD
    SC --> PB
    SC --> VB
    SC --> UP
    SC --> AS
    
    CR[Cron Jobs] --> SC
    
    %% External APIs
    TTAPI[TikTok Content API] --> UP
    TTSTU[TikTok Studio] --> AS
    
    %% Output
    VID[Generated Videos] --> UP
    LOG[Log Files] --> SC
    
    %% Styling
    classDef scraper fill:#e1f5fe
    classDef processor fill:#f3e5f5
    classDef storage fill:#e8f5e8
    classDef external fill:#fff3e0
    classDef output fill:#fce4ec
    
    class TS,AS scraper
    class TR,BD,PB,VB processor
    class DB,CF,BG,OV,LUT storage
    class TT,HS,TTAPI,TTSTU,CR external
    class UP,VID,LOG output
```

## Data Flow Diagram

```mermaid
sequenceDiagram
    participant C as Cron Job
    participant S as Scheduler
    participant TS as Trend Scraper
    participant TR as Trend Ranker
    participant B as Bandit
    participant P as Prompt Builder
    participant V as Video Builder
    participant U as Uploader
    participant A as Analytics
    participant DB as Database
    
    C->>S: Execute pipeline
    S->>TS: Scrape trends
    TS->>DB: Save trends
    TS-->>S: Trends collected
    
    S->>TR: Rank trends
    TR->>DB: Calculate scores
    TR-->>S: Rankings ready
    
    S->>B: Select hashtag
    B->>DB: Get top trends
    B->>DB: Log decision
    B-->>S: Hashtag selected
    
    S->>P: Generate script
    P->>DB: Save script
    P-->>S: Script ready
    
    S->>V: Create video
    V-->>S: Video created
    
    S->>U: Upload video
    U->>DB: Log upload
    U-->>S: Upload complete
    
    Note over A: Runs separately
    A->>DB: Update metrics
    A->>B: Update rewards
```

## Component Architecture

```mermaid
graph LR
    subgraph "Data Collection"
        TS[Trend Scraper]
        AS[Analytics Scraper]
    end
    
    subgraph "Intelligence Layer"
        TR[Trend Ranker]
        BD[ε-Greedy Bandit]
        PB[Prompt Builder]
    end
    
    subgraph "Content Creation"
        VB[Video Builder]
        TE[Template Engine]
        FX[Effects Processor]
    end
    
    subgraph "Distribution"
        UP[Uploader]
        SC[Scheduler]
        RL[Rate Limiter]
    end
    
    subgraph "Storage & Config"
        DB[(Database)]
        CF[Config Files]
        AS_DIR[Assets]
    end
    
    TS --> TR
    TR --> BD
    BD --> PB
    PB --> VB
    VB --> TE
    VB --> FX
    VB --> UP
    UP --> SC
    UP --> RL
    AS --> BD
    
    DB --> TR
    DB --> BD
    DB --> UP
    DB --> AS
    
    CF --> PB
    CF --> VB
    CF --> UP
    
    AS_DIR --> VB
```

## Database Schema

```mermaid
erDiagram
    TRENDS {
        int id PK
        string hashtag
        int views
        int posts
        float growth_rate
        string category
        timestamp scraped_at
        string source
    }
    
    TREND_HISTORY {
        int id PK
        string hashtag FK
        int views
        int posts
        timestamp timestamp
    }
    
    TREND_SCORES {
        int id PK
        string hashtag FK
        int views
        int posts
        float view_growth_1h
        float engagement_rate
        string category
        float category_bonus
        float base_score
        float final_score
        timestamp calculated_at
    }
    
    BANDIT_DECISIONS {
        int id PK
        string hashtag
        timestamp decision_time
        float expected_reward
        float actual_reward
        int video_views
        int video_likes
        int video_shares
        int video_comments
        timestamp reward_updated_at
    }
    
    BANDIT_ARMS {
        string hashtag PK
        int total_selections
        float total_reward
        float avg_reward
        float confidence_interval
        timestamp last_selected
        timestamp created_at
    }
    
    VIDEO_SCRIPTS {
        int id PK
        string hashtag
        string main_text
        string style
        string call_to_action
        string visual_cues
        string emoji_sequence
        string timing_data
        timestamp generated_at
        boolean used_for_video
    }
    
    VIDEO_UPLOADS {
        int id PK
        string video_path
        string hashtag
        string main_text
        string upload_status
        string tiktok_video_id
        timestamp upload_time
        int views
        int likes
        int shares
        int comments
        timestamp last_metrics_update
        string error_message
    }
    
    VIDEO_ANALYTICS {
        int id PK
        string video_id FK
        int views
        int likes
        int shares
        int comments
        float watch_time
        float ctr
        float engagement_rate
        timestamp scraped_at
    }
    
    UPLOAD_SCHEDULE {
        int id PK
        string video_path
        timestamp scheduled_time
        string status
        timestamp created_at
    }
    
    TRENDS ||--o{ TREND_HISTORY : tracks
    TRENDS ||--o{ TREND_SCORES : scores
    BANDIT_DECISIONS ||--o{ BANDIT_ARMS : updates
    VIDEO_SCRIPTS ||--o{ VIDEO_UPLOADS : generates
    VIDEO_UPLOADS ||--o{ VIDEO_ANALYTICS : tracks
```

## Video Processing Pipeline

```mermaid
graph TD
    subgraph "Input Processing"
        SC[Script Input]
        AS[Asset Selection]
        TP[Template Selection]
    end
    
    subgraph "Video Composition"
        BG[Background Layer]
        TX[Text Layer]
        FX[Effects Layer]
        UI[UI Elements]
    end
    
    subgraph "Post Processing"
        LUT[LUT Color Grading]
        GL[Glow Effects]
        LP[Loop Optimization]
        WM[Watermarks]
    end
    
    subgraph "Output"
        MP4[MP4 Export]
        UP[Upload Ready]
    end
    
    SC --> TP
    AS --> BG
    SC --> TX
    TP --> FX
    SC --> UI
    
    BG --> LUT
    TX --> LUT
    FX --> LUT
    UI --> LUT
    
    LUT --> GL
    GL --> LP
    LP --> WM
    
    WM --> MP4
    MP4 --> UP
    
    %% Template specific flows
    TP -.-> |Template A| PWR[Power Effects]
    TP -.-> |Template B| TCH[Tech Effects]
    TP -.-> |Template C| SAV[Savings Effects]
    
    PWR --> FX
    TCH --> FX
    SAV --> FX
```

## Bandit Learning Process

```mermaid
graph LR
    subgraph "Exploration vs Exploitation"
        EP[ε-Greedy Policy]
        EX[Explore 10%]
        EXP[Exploit 90%]
    end
    
    subgraph "Reward Calculation"
        VM[Video Metrics]
        VW[Views Weight: 50%]
        EG[Engagement Weight: 30%]
        ER[Engagement Rate Weight: 20%]
        RW[Total Reward]
    end
    
    subgraph "Learning Update"
        AR[Arm Selection]
        RU[Reward Update]
        WS[Warm Start]
        OPT[Epsilon Optimization]
    end
    
    EP --> EX
    EP --> EXP
    
    VM --> VW
    VM --> EG
    VM --> ER
    VW --> RW
    EG --> RW
    ER --> RW
    
    RW --> RU
    AR --> WS
    RU --> OPT
    
    EX -.-> AR
    EXP -.-> AR
```

## Deployment Architecture

```mermaid
graph TB
    subgraph "Cloud Infrastructure"
        VM[Ubuntu 22.04 VM]
        ST[Storage Volume]
        NET[Network Interface]
    end
    
    subgraph "Application Stack"
        PY[Python 3.8+]
        FF[FFmpeg]
        CH[Chrome Headless]
        CR[Cron Daemon]
    end
    
    subgraph "Project Structure"
        APP[Application Code]
        CFG[Configuration]
        AST[Assets Directory]
        LOG[Logs Directory]
        OUT[Output Directory]
        BCK[Backup Directory]
    end
    
    subgraph "External Services"
        TTAPI[TikTok API]
        TTSTU[TikTok Studio]
        DSC[Discord Webhooks]
    end
    
    VM --> PY
    VM --> FF
    VM --> CH
    VM --> CR
    
    ST --> AST
    ST --> LOG
    ST --> OUT
    ST --> BCK
    
    PY --> APP
    APP --> CFG
    
    CR --> APP
    APP --> TTAPI
    APP --> TTSTU
    APP --> DSC
    
    NET --> TTAPI
    NET --> TTSTU
    NET --> DSC
